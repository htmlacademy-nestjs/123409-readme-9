import { PrismaClient } from '@prisma/client';

const FIRST_USER_ID = '658170cbb954e9f5b905ccf4';
const SECOND_USER_ID = '6581762309c030b503e30512';

function getPosts() {
  return [
    {
      type: 'article',
      status: 'published',
      authorId: FIRST_USER_ID,
      originalAuthorId: null,
      originalPostId: null,
      isRepost: false,
      publishedAt: new Date(),
      content: {
        title: '–•—É–¥–µ—é—â–∏–π',
        announcement: '–ù–µ–¥–∞–≤–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–ª —Å—Ç—Ä–∞—à–Ω—ã–π —Ä–æ–º–∞–Ω ¬´–•—É–¥–µ—é—â–∏–π¬ª.',
        content: '–ù–∞ –º–æ–π –≤–∑–≥–ª—è–¥, —ç—Ç–æ –æ–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö —Å—Ç—Ä–∞—à–Ω—ã—Ö —Ä–æ–º–∞–Ω–æ–≤ –°—Ç–∏–≤–µ–Ω–∞ –ö–∏–Ω–≥–∞.'
      },
      tags: ['books', 'horror'],
      comments: [
        {
          content: '–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ª–∏—á–Ω–∞—è –∫–Ω–∏–≥–∞!',
          authorId: FIRST_USER_ID,
        },
        {
          content: '–ù–∞–¥–æ –±—É–¥–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å. –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.',
          authorId: SECOND_USER_ID,
        }
      ]
    },
    {
      type: 'article',
      status: 'published',
      authorId: FIRST_USER_ID,
      originalAuthorId: null,
      originalPostId: null,
      isRepost: false,
      publishedAt: new Date(),
      content: {
        title: '–í—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ JavaScript',
        announcement: '–ü–æ–ª–µ–∑–Ω–∞—è –∫–Ω–∏–≥–∞ –ø–æ JavaScript',
        content: '–°–µ–∫—Ä–µ—Ç—ã –∏ —Ç–∞–π–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –ø–æ JavaScript.'
      },
      tags: ['programming', 'javascript', 'books'],
      comments: [
        {
          content: '–û—Ç–ª–∏—á–Ω–∞—è –∫–Ω–∏–≥–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è JavaScript!',
          authorId: SECOND_USER_ID,
        }
      ]
    }
  ];
}

async function seedDb(prismaClient: PrismaClient) {
  const mockPosts = getPosts();
  
  for (const post of mockPosts) {
    await prismaClient.post.create({
      data: {
        type: post.type,
        status: post.status,
        authorId: post.authorId,
        originalAuthorId: post.originalAuthorId,
        originalPostId: post.originalPostId,
        isRepost: post.isRepost,
        publishedAt: post.publishedAt,
        content: post.content,
        tags: post.tags,
        comments: post.comments ? {
          create: post.comments
        } : undefined
      }
    });
  }

  console.info('ü§òÔ∏è Database was filled');
}

async function bootstrap() {
  const prismaClient = new PrismaClient();

  try {
    await seedDb(prismaClient);
    globalThis.process.exit(0);
  } catch (error: unknown) {
    console.error(error);
    globalThis.process.exit(1);
  } finally {
    await prismaClient.$disconnect();
  }
}

bootstrap();
